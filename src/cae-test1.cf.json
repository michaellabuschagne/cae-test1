{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ArtifactsS3BucketName": {
      "Type": "String",
      "Default": "cae-test1-deployment-artifacts",
      "Description": "The S3 bucket used to store the Lambda function binaries"
    },
    "DynamoDBTableName": {
      "Type": "String",
      "Default": "cae-test1",
      "Description": "The DynamoDB Table which the application will use"
    },
    "DDBReadCapacityUnits": {
      "Type": "Number",
      "Default": 5,
      "Description": "The RCUs allocated to the DynamoDB Table"
    },
    "DDBWriteCapacityUnits": {
      "Type": "Number",
      "Default": 250,
      "Description": "The RCUs allocated to the DynamoDB Table"
    },
    "GenerateFakeCustomerUsageLambdaS3Key": {
      "Type": "String",
      "Default": "generateFakeCustomerUsage-v8.zip",
      "Description": "The name of the generateFakeCustomerUsage binary"
    },
    "GFCULambdaEnvCustomerRows": {
      "Type": "String",
      "Default": "1000",
      "Description": "Number of customers the Lambda should generate data for"
    },
    "GenerateEnergyDataLambdaS3Key": {
      "Type": "String",
      "Description": "The name of the generateFakeEnergyPricing binary"
    },
    "DynamoDbStreamHandlerLambdaS3Key": {
      "Type": "String",
      "Description": "The name of the dynamoDbStreamHandler binary"
    },
    "QueryCustomerBillLambdaS3Key": {
      "Type": "String",
      "Description": "The name of the customerBillApi binary"
    },
    "CustomerUsageSqsTriggerLambdaS3Key": {
      "Type": "String",
      "Description": "The name of the customerUsageSqsTrigger binary"
    }
  },
  "Outputs": {
    "DynamoDBTableName": {
      "Description": "The DynamoDB Table which the application will use",
      "Value": {
        "Ref": "DynamoDBTableName"
      }
    },
    "ArtifactsS3Bucket": {
      "Description": "Lambda artifact store for this stack",
      "Value": {
        "Ref": "ArtifactsS3BucketName"
      }
    },
    "APIGatewayEndpoint": {
      "Description": "The HTTP endpoint for the Customer Bill API",
      "Value": {
        "Fn::Sub": "https://${queryCustomerBillApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${customerBillApiGatewayStage}/bill?customerid=005&start=2020-09-20T00:00:00Z&end=2020-12-31T07:00:00Z"
      }
    }
  },
  "Resources": {
    "caeDynamoDb": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Ref": "DynamoDBTableName"
        },
        "BillingMode": "PROVISIONED",
        "KeySchema": [
          {
            "AttributeName": "Type",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "Interval",
            "KeyType": "RANGE"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "Type",
            "AttributeType": "S"
          },
          {
            "AttributeName": "Interval",
            "AttributeType": "N"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": {
            "Ref": "DDBReadCapacityUnits"
          },
          "WriteCapacityUnits": {
            "Ref": "DDBWriteCapacityUnits"
          }
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        }
      }
    },
    "lambdaGenerateExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Description": "Role for Lambdas which generate and push data to Dynamo DB",
        "RoleName": "LambdaGenerateExecutionRole"
      }
    },
    "lambdaCustomerBillQueryExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Description": "Role for Lambdas which generate and push data to Dynamo DB",
        "RoleName": "LambdaCustomerBillQueryExecutionRole"
      }
    },
    "lambdaGenerateDataExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:*",
                "logs:*",
                "dynamodb:PutItem",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "caeDynamoDb",
                    "Arn"
                  ]
                },
                "arn:aws:cloudwatch:*:*:*",
                "arn:aws:logs:*:*:*"
              ]
            }
          ]
        },
        "PolicyName": "LambdaGenerateDataExecutionPolicy",
        "Roles": [
          "LambdaGenerateExecutionRole",
          "LambdaDDBStreamExecutionRole",
          "LambdaCustomerBillQueryExecutionRole"
        ]
      }
    },
    "generateCustomerDataLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ArtifactsS3BucketName"
          },
          "S3Key": {
            "Ref": "GenerateFakeCustomerUsageLambdaS3Key"
          }
        },
        "Description": "Lambda Function which generated Customer Usage data and pushes it to DynamoDB",
        "FunctionName": "GenerateCustomerDataLambda",
        "Handler": "dist/handler.generateFakeCustomerData",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "lambdaGenerateExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "DynamoDBTableName"
            },
            "CUSTOMER_ROWS": {
              "Ref": "GFCULambdaEnvCustomerRows"
            },
            "CUSTOMER_USAGE_URL": {
              "Fn::Sub": "https://${customerUsageApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${customerUsageIngestApiGatewayStage}/usage"
            }
          }
        }
      }
    },
    "generateEnergyDataLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ArtifactsS3BucketName"
          },
          "S3Key": {
            "Ref": "GenerateEnergyDataLambdaS3Key"
          }
        },
        "Description": "Lambda Function which generated Energy Pricing data and pushes it to DynamoDB",
        "FunctionName": "GenerateEnergyDataLambda",
        "Handler": "dist/handler.generateFakeEnergyData",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "lambdaGenerateExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 3,
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "DynamoDBTableName"
            }
          }
        }
      }
    },
    "generateCustomerDataCron": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Trigger the GenerateCustomerDataLambda and GenerateEnergyDataLambda every 5 minutes",
        "Name": "GenerateEnergyData-GenerateCustomerDataLambda-CRON",
        "ScheduleExpression": "rate(5 minutes)",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "generateCustomerDataLambda",
                "Arn"
              ]
            },
            "Id": "generateCustomerDataLambda"
          },
          {
            "Arn": {
              "Fn::GetAtt": [
                "generateEnergyDataLambda",
                "Arn"
              ]
            },
            "Id": "generateEnergyDataLambda"
          }
        ]
      }
    },
    "generateCustomerDataLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "generateCustomerDataLambda",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "generateCustomerDataCron",
            "Arn"
          ]
        }
      }
    },
    "generateEnergyDataLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "generateEnergyDataLambda",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "generateCustomerDataCron",
            "Arn"
          ]
        }
      }
    },
    "lambdaDDBStreamExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole"
        ],
        "Description": "Role for Lambda which handles DynamoDB stream data",
        "RoleName": "LambdaDDBStreamExecutionRole"
      }
    },
    "dynamoDbStreamHandlerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ArtifactsS3BucketName"
          },
          "S3Key": {
            "Ref": "DynamoDbStreamHandlerLambdaS3Key"
          }
        },
        "Description": "Lambda Function which handle DynamoDB stream data and maitain hourly Customer Usage",
        "FunctionName": "DDBStreamCustomerDataHandlerLambda",
        "Handler": "dist/handler.rollUpCustomerUsageData",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "lambdaDDBStreamExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "DynamoDBTableName"
            }
          }
        }
      }
    },
    "dynamoDbStreamCustomerUsageTrigger": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 1000,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "caeDynamoDb",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "dynamoDbStreamHandlerLambda",
            "Arn"
          ]
        },
        "MaximumBatchingWindowInSeconds": 300,
        "ParallelizationFactor": 1,
        "StartingPosition": "LATEST"
      }
    },
    "apiGatewayDDBReadPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:*",
                "logs:*",
                "dynamodb:Query"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "caeDynamoDb",
                    "Arn"
                  ]
                },
                "arn:aws:cloudwatch:*:*:*",
                "arn:aws:logs:*:*:*"
              ]
            }
          ]
        },
        "PolicyName": "LambdaGenerateDataExecutionPolicy",
        "Roles": [
          "ApiGatewayCustomerDDBQueryRole"
        ]
      }
    },
    "apiGatewayCustomerDDBQueryRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Description": "Role for API Gateway to query Dynamo DB",
        "RoleName": "ApiGatewayCustomerDDBQueryRole"
      }
    },
    "queryCustomerBillLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ArtifactsS3BucketName"
          },
          "S3Key": {
            "Ref": "QueryCustomerBillLambdaS3Key"
          }
        },
        "Description": "Lambda Function which will query Customer Usage data from DynamoDB",
        "FunctionName": "QueryCustomerBillLambda",
        "Handler": "dist/handler.queryCustomerBill",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "lambdaCustomerBillQueryExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "DynamoDBTableName"
            }
          }
        }
      }
    },
    "queryCustomerBillApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "CustomerBilling",
        "Description": "Customer billing data API",
        "FailOnWarnings": true
      }
    },
    "queryCustomerBillApiGatewayLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "queryCustomerBillLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "queryCustomerBillApiGateway"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "apiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "apiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "apiGatewayCloudWatchLogsRole",
            "Arn"
          ]
        }
      }
    },
    "customerBillApiGatewayStage": {
      "DependsOn": [
        "apiGatewayAccount"
      ],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "customerBillApiGatewayDeployment"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "queryCustomerBillApiGateway"
        },
        "StageName": "LATEST"
      }
    },
    "customerBillApiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "queryCustomerBillGetMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "queryCustomerBillApiGateway"
        },
        "StageName": "DummyStage"
      }
    },
    "customerBillResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "queryCustomerBillApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "queryCustomerBillApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "bill"
      }
    },
    "queryCustomerBillGetMethod": {
      "DependsOn": "queryCustomerBillApiGatewayLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "queryCustomerBillLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ]
        },
        "RequestParameters": {
          "method.request.querystring.customerid": true,
          "method.request.querystring.start": true,
          "method.request.querystring.end": true
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "OperationName": "GetCustomerBill",
        "RequestValidatorId": {
          "Ref": "queryCustomerBillRequestValidator"
        },
        "ResourceId": {
          "Ref": "customerBillResource"
        },
        "RestApiId": {
          "Ref": "queryCustomerBillApiGateway"
        }
      }
    },
    "queryCustomerBillRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "Name": "GetCustomerBillValidator",
        "RestApiId": {
          "Ref": "queryCustomerBillApiGateway"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true
      }
    },
    "customerUsageDataIngestDeadLetterQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "CustomerUsageDataDLQ",
        "DelaySeconds": 0,
        "KmsMasterKeyId": "alias/aws/sqs",
        "MaximumMessageSize": 262144,
        "MessageRetentionPeriod": 1209600,
        "ReceiveMessageWaitTimeSeconds": 20,
        "VisibilityTimeout": 60
      }
    },
    "customerUsageDataIngestQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "CustomerUsageData",
        "DelaySeconds": 0,
        "KmsMasterKeyId": "alias/aws/sqs",
        "MaximumMessageSize": 262144,
        "MessageRetentionPeriod": 1209600,
        "ReceiveMessageWaitTimeSeconds": 20,
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "customerUsageDataIngestDeadLetterQueue",
              "Arn"
            ]
          },
          "maxReceiveCount": 3
        },
        "VisibilityTimeout": 60
      }
    },
    "customerIngestSqsSendMessage": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "customerUsageDataIngestQueue",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CustomerIngestSqsSendMessagePolicy",
        "Roles": [
          "CustomerIngestSqsSendMessageRole"
        ]
      }
    },
    "customerIngestSqsSendMessageRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "CustomerIngestSqsSendMessageRole",
        "Description": "Role to allow API gateway Customer Usage Ingest API to send messages to Customer Usage Data Ingest SQS",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "customerUsageApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "CustomerUsage",
        "Description": "Customer usage data ingest API",
        "FailOnWarnings": true
      }
    },
    "customerUsageApiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "customerUsagePostMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "customerUsageApiGateway"
        },
        "StageName": "DummyStage"
      }
    },
    "customerUsageIngestApiGatewayStage": {
      "DependsOn": [
        "apiGatewayAccount"
      ],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "customerUsageApiGatewayDeployment"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "customerUsageApiGateway"
        },
        "StageName": "LATEST"
      }
    },
    "customerUsageResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "customerUsageApiGateway"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "customerUsageApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "usage"
      }
    },
    "model": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "Name": "CustomerUsage",
        "Description": "Customer Usage Data Ingest Schema",
        "RestApiId": {
          "Ref": "customerUsageApiGateway"
        },
        "ContentType": "application/json",
        "Schema": {}
      }
    },
    "customerUsagePostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "customerIngestSqsSendMessageRole",
              "Arn"
            ]
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestParameters": {
            "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'"
          },
          "RequestTemplates": {
            "application/json": "Action=SendMessage&MessageBody=$input.body"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":sqs:path/",
                {
                  "Ref": "AWS::AccountId"
                },
                "/",
                {
                  "Fn::GetAtt": [
                    "customerUsageDataIngestQueue",
                    "QueueName"
                  ]
                }
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ],
        "OperationName": "SendCustomerUsage",
        "RequestValidatorId": {
          "Ref": "customerUsagePostRequestValidator"
        },
        "ResourceId": {
          "Ref": "customerUsageResource"
        },
        "RestApiId": {
          "Ref": "customerUsageApiGateway"
        }
      }
    },
    "customerUsagePostRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "Name": "PostCustomerUsageValidator",
        "RestApiId": {
          "Ref": "customerUsageApiGateway"
        },
        "ValidateRequestBody": true
      }
    },
    "customerUsageSqsTriggerLambda": {
      "DependsOn": "lambdaCustomerUsageSqsTriggerExecutionPolicy",
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ArtifactsS3BucketName"
          },
          "S3Key": {
            "Ref": "CustomerUsageSqsTriggerLambdaS3Key"
          }
        },
        "Description": "Triggered by items added to Customer Usage Queue. Processes and writes messages to DynamoDB",
        "Environment": {
          "Variables": {
            "DDB_TABLE_NAME": {
              "Ref": "DynamoDBTableName"
            }
          }
        },
        "FunctionName": "CustomerUsageSqsTriggerLambda",
        "Handler": "dist/handler.handleCustomerUsageDataIngest",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "lambdaCustomerUsageSqsTriggerExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 60
      }
    },
    "lambdaCustomerUsageSqsTriggerExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Description": "Role for Lambdas which generate and push data to Dynamo DB",
        "RoleName": "LambdaCustomerUsageSqsTriggerExecutionRole"
      }
    },
    "lambdaCustomerUsageSqsTriggerExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:*",
                "logs:*",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "caeDynamoDb",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "customerUsageDataIngestQueue",
                    "Arn"
                  ]
                },
                "arn:aws:cloudwatch:*:*:*",
                "arn:aws:logs:*:*:*"
              ]
            }
          ]
        },
        "PolicyName": "LambdaGenerateDataExecutionPolicy",
        "Roles": [
          "LambdaCustomerUsageSqsTriggerExecutionRole"
        ]
      }
    },
    "sqsCustomerUsageTrigger": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 10,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "customerUsageDataIngestQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "customerUsageSqsTriggerLambda",
            "Arn"
          ]
        }
      }
    }

  }
}